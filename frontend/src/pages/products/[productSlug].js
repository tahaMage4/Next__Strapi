import Head from "next/head";
import Layout from "@components/Layout";
import Container from "@components/Container";
import Button from "@components/Button";
import styles from "@styles/Product.module.scss";
import { gql } from "@apollo/client";
import { getApolloClient } from "@lib/aplloClient";

export default function Product({ product }) {
  return (
    // <Layout>
    //   <Head>
    //     <title>{product.name}</title>
    //     <meta name="description" content="Generated by create next app" />
    //   </Head>

    //   <Container>
    //     <div className={styles.productWrapper}>
    //       <div className={styles.productImage}>
    //         <img
    //           width={product.image.width}
    //           height={product.image.height}
    //           src={product.image.url}
    //           alt="Images"
    //         />
    //       </div>
    //       <div className={styles.productContent}>
    //         <h1>{product.name}</h1>
    //         <div
    //           className={styles.productDescription}
    //           dangerouslySetInnerHTML={{
    //             __html: product.description?.html,
    //           }}
    //         />

    //         <p className={styles.productPrice}>${product.price}</p>
    //         <p className={styles.productBuy}>
    //           <Button
    //             className="snipcart-add-item"
    //             data-item-id={product.id}
    //             data-item-price={product.price}
    //             data-item-url={`/products/${product.slug}`}
    //             data-item-image={product.image.url}
    //             data-item-name={product.name}
    //           >
    //             Add to Cart
    //           </Button>
    //         </p>
    //       </div>
    //     </div>
    //   </Container>
    // </Layout>
    <h1>Data</h1>
  );
}

// for product page
export async function getStaticProps({ params, locale }) {
  const client = getApolloClient();
  const data = await client.query({
    query: gql`
      query ProductPage($id: ID, $locale: Locale!) {
        # product(where: { slug: $slug }) {
        #   id
        #   image
        #   name
        #   price
        #   slug
        #   description {
        #     html
        #   }
        #   localizations(locales: [$locale]) {
        #     description {
        #       html
        #     }
        #     locale
        #   }
        # }
        product(where: { id: $id }) {
          data {
            id
            attributes {
              Name
              Price
              Slug
              Description
              localizations(locales: [$locale]) {
                Description
                locale
              }
              Image {
                data {
                  attributes {
                    width
                    height
                    url
                  }
                }
              }
            }
          }
        }
      }
    `,
    variables: {
      slug: params.productSlug,
      locale,
    },
  });

  // for simple do that way
  // const product = data.data.product;

  // for locale (lang) work we do that
  let product = data.data.product.data;
  if (product.localizations.length > 0) {
    product = {
      ...product,
      ...product.localizations[0],
    };
  }

  return {
    props: {
      product,
    },
  };
}

// for dynamic routes
export async function getStaticPaths({ locales }) {
  const client = getApolloClient();

  const data = await client.query({
    query: gql`
      query ProductsPage {
        products {
          data {
            id
            attributes {
              Name
              Price
              Description
              Slug
              category
              colors
              Size
              Image {
                data {
                  id
                  attributes {
                    url
                    width
                    height
                    name
                  }
                }
              }
            }
          }
        }
      }
    `,
  });

  const paths = data.data.products.data.map((product) => {
    return {
      params: {
        productSlug: product.attributes.Slug,
      },
    };
  });

  return {
    // paths, for simple routing
    //  for locale routing
    paths: [
      ...paths,
      ...paths.flatMap((path) => {
        return locales.map((locale) => {
          return {
            ...path,
            locale,
          };
        });
      }),
    ],
    fallback: false, // can also be true or 'blocking'
  };
}
